import math
import os

def generate_header():
    return [
        "; GCODE Generated by Python Script",
        "G21 ; mm-mode"
    ]

def initialize_plotter():
    return [
        "G0 F250 X0.0000 Y0.0000"
    ]

def move_to(x, y, feed_rate):
    return [f"G1 F{feed_rate} X{x} Y{y}"]

def generate_swirl_path_vertical(width, height, loops, speed,initial_height):
    gcode = []

    gcode.append(f"G0 F1000 X{initial_height:.4f} Y0.0000")
    gcode.append("G4 P30 ; Pause for 30 seconds for tool loading")


    step_y = width / (loops)  # Use width to determine step size for Y, since we're rotating the path
    current_x = initial_height
    current_y = 0
    move_up = True

    first_iteration = True

    for i in range(loops):
        # Move horizontally (left or right)
        if not first_iteration:
            current_y += step_y
            gcode.extend(move_to(current_x, current_y, speed))
        
        if first_iteration:
            gcode.extend(move_to(current_x, current_y, speed))

        # If moving up, go all the way to the maximum X value (since we've rotated the path)
        if move_up:
            current_x = height  # Use height here because of the 90-degree rotation
            gcode.extend(move_to(current_x, current_y, speed))
            move_up = False
        else:
            current_x = initial_height
            gcode.extend(move_to(current_x, current_y, speed))
            move_up = True
        first_iteration = False

    return gcode


def validate_position_vertical(y, x, max_y=800, max_x=300):
    if x < 0 or x > max_x or y < 0 or y > max_y:
        raise ValueError(f"Path exceeds boundary limits at X:{x}, Y:{y}. Max X:{max_x}, Max Y:{max_y}")

def move_to(x, y, feed_rate):
    validate_position_vertical(x, y)
    return [f"G1 F{feed_rate} X{x:.4f} Y{y:.4f}"]

def main(width, height, speed, loops,initial_height ):
    try:
        gcode = []
        gcode.extend(generate_swirl_path_vertical(width, height, loops, speed,initial_height))

        # Define the output path and filename
        OUTPUT_PATH = 'G-code generator'
        filename = 'gcode trial 1.gcode'

        # Ensure the directory exists
        if not os.path.exists(OUTPUT_PATH):
            os.makedirs(OUTPUT_PATH)

        full_path = os.path.join(OUTPUT_PATH, filename)

        with open(full_path, "w") as file:
            for line in gcode:
                file.write(line + "\n")

        print(f"G-code successfully written to {full_path}")

    except ValueError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    width = 300
    height = 420
    speed = 250
    loops = 10
    Height_start_point = 30
    main(width, height, speed, loops, Height_start_point)  # Example parameters